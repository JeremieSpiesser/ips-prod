/**
 *  @file schrodingerVerificator.cpp
 */

#include "../headers/schrodingerVerificator.h"
#include "../headers/poly.h"
#include "../headers/phi.h"

/**
 * Relatively constant value of pi
 */
#define PI 3.1415926535897932384626433

/**
 * Matrix of Gauss-Hermite coefficients containing in the first row the points and in the second row the weights
 * Size : 2 rows, 256 columns
 */
static const arma::mat hermiteMatrix = {
    {
        -21.99169338, -21.49683654, -21.09003212, -20.39835006,
            -20.72922879, -20.08910699, -19.79652581, -19.51732879,
            -19.24921291, -18.9904825, -18.73984369, -18.49628095,
            -18.25897887, -18.02727017, -17.80060012, -17.57850124,
            -17.36057494, -17.14647791, -16.93591178, -16.72861514,
            -16.52435738, -16.3229337, -16.12416123, -15.92787575,
            -15.73392917, -15.54218726, -15.35252794, -15.16483974,
            -14.9790205, -14.79497635, -14.61262071, -14.43187357,
            -14.25266073, -14.07491327, -13.89856698, -13.72356196,
            -13.54984214, -13.37735502, -13.20605127, -13.03588454,
            -12.86681113, -12.69878981, -12.53178165, -12.36574978,
            -12.20065926, -12.03647696, -11.87317137, -11.71071255,
            -11.54907197, -11.38822241, -11.22813792, -11.0687937,
            -10.91016601, -10.75223214, -10.59497032, -10.43835967,
            -10.28238014, -10.12701248,  -9.97223817,  -9.81803937,
            -9.66439892,  -9.51130026,  -9.35872743,  -9.20666501,
            -9.05509811,  -8.90401233,  -8.75339374,  -8.60322886,
            -8.45350462,  -8.30420837,  -8.15532781,  -8.00685103,
            -7.85876644,  -7.7110628,  -7.56372916,  -7.41675488,
            -7.27012959,  -7.1238432,  -6.97788588,  -6.83224803,
            -6.68692028,  -6.54189351,  -6.39715878,  -6.25270738,
            -6.10853076,  -5.9646206,  -5.82096872,  -5.67756712,
            -5.53440796,  -5.39148357,  -5.2487864,  -5.10630906,
            -4.96404429,  -4.82198495,  -4.68012404,  -4.53845466,
            -4.39697003,  -4.25566347,  -4.11452841,  -3.97355838,
            -3.83274699,  -3.69208794,  -3.55157502,  -3.41120211,
            -3.27096313,  -3.13085211,  -2.99086313,  -2.85099034,
            -2.71122794,  -2.5715702,  -2.43201144,  -2.29254603,
            -2.15316839,  -2.01387298,  -1.87465431,  -1.73550692,
            -1.59642539,  -1.45740433,  -1.31843839,  -1.17952223,
            -1.04065054,  -0.90181806,  -0.76301949,  -0.62424962,
            -0.48550319,  -0.34677498,  -0.20805978,  -0.06935239,
            0.06935239,   0.20805978,   0.34677498,   0.48550319,
            0.62424962,   0.76301949,   0.90181806,   1.04065054,
            1.17952223,   1.31843839,   1.45740433,   1.59642539,
            1.73550692,   1.87465431,   2.01387298,   2.15316839,
            2.29254603,   2.43201144,   2.5715702,   2.71122794,
            2.85099034,   2.99086313,   3.13085211,   3.27096313,
            3.41120211,   3.55157502,   3.69208794,   3.83274699,
            3.97355838,   4.11452841,   4.25566347,   4.39697003,
            4.53845466,   4.68012404,   4.82198495,   4.96404429,
            5.10630906,   5.2487864,   5.39148357,   5.53440796,
            5.67756712,   5.82096872,   5.9646206,   6.10853076,
            6.25270738,   6.39715878,   6.54189351,   6.68692028,
            6.83224803,   6.97788588,   7.1238432,   7.27012959,
            7.41675488,   7.56372916,   7.7110628,   7.85876644,
            8.00685103,   8.15532781,   8.30420837,   8.45350462,
            8.60322886,   8.75339374,   8.90401233,   9.05509811,
            9.20666501,   9.35872743,   9.51130026,   9.66439892,
            9.81803937,   9.97223817,  10.12701248,  10.28238014,
            10.43835967,  10.59497032,  10.75223214,  10.91016601,
            11.0687937,  11.22813792,  11.38822241,  11.54907197,
            11.71071255,  11.87317137,  12.03647696,  12.20065926,
            12.36574978,  12.53178165,  12.69878981,  12.86681113,
            13.03588454,  13.20605127,  13.37735502,  13.54984214,
            13.72356196,  13.89856698,  14.07491327,  14.25266073,
            14.43187357,  14.61262071,  14.79497635,  14.9790205,
            15.16483974,  15.35252794,  15.54218726,  15.73392917,
            15.92787575,  16.12416123,  16.3229337,  16.52435738,
            16.72861514,  16.93591178,  17.14647791,  17.36057494,
            17.57850124,  17.80060012,  18.02727017,  18.25897887,
            18.49628095,  18.73984369,  18.9904825,  19.24921291,
            19.51732879,  19.79652581,  20.08910699,  20.39835006,
            20.72922879,  21.09003212,  21.49683654,  21.99169338
        },
    {
        5.23585453e-211, 8.89916777e-202, 2.57171258e-194, 8.31521612e-188,
        6.26728995e-182, 1.61549550e-176, 1.79659626e-171, 1.00595180e-166,
        3.16346232e-162, 6.05900969e-158, 7.52171850e-154, 6.35683325e-150,
        3.80534786e-146, 1.66702081e-142, 5.49176431e-139, 1.39226520e-135,
        2.77042574e-132, 4.40150917e-129, 5.66705337e-126, 5.99104037e-123,
        5.26105468e-120, 3.87753443e-117, 2.42086269e-114, 1.29102717e-111,
        5.92550121e-109, 2.35674821e-106, 8.17356796e-104, 2.48600835e-101,
        6.66599405e-099, 1.58342577e-096, 3.34687619e-094, 6.32100452e-092,
        1.07078869e-089, 1.63283947e-087, 2.24880262e-085, 2.80594068e-083,
        3.18119127e-081, 3.28602898e-079, 3.10054148e-077, 2.67877709e-075,
        2.12400859e-073, 1.54891893e-071, 1.04096107e-069, 6.45961747e-068,
        3.70795751e-066, 1.97227114e-064, 9.73672145e-063, 4.46835956e-061,
        1.90903879e-059, 7.60368146e-058, 2.82720987e-056, 9.82590654e-055,
        3.19593420e-053, 9.73957593e-052, 2.78409039e-050, 7.47292582e-049,
        1.88540741e-047, 4.47560089e-046, 1.00054308e-044, 2.10837804e-043,
        4.19144239e-042, 7.86755683e-041, 1.39547613e-039, 2.34068128e-038,
        3.71550466e-037, 5.58540987e-036, 7.95698157e-035, 1.07493186e-033,
        1.37792437e-032, 1.67704265e-031, 1.93905368e-030, 2.13111054e-029,
        2.22754804e-028, 2.21553770e-027, 2.09787696e-026, 1.89208081e-025,
        1.62615003e-024, 1.33241044e-023, 1.04126240e-022, 7.76441334e-022,
        5.52660603e-021, 3.75645888e-020, 2.43911295e-019, 1.51347552e-018,
        8.97760665e-018, 5.09252876e-017, 2.76334414e-016, 1.43483108e-015,
        7.13118552e-015, 3.39346936e-014, 1.54656731e-013, 6.75232587e-013,
        2.82494669e-012, 1.13278581e-011, 4.35482086e-011, 1.60538055e-010,
        5.67632503e-010, 1.92544279e-009, 6.26695990e-009, 1.95763332e-008,
        5.86996592e-008, 1.68984864e-007, 4.67135464e-007, 1.24020127e-006,
        3.16274404e-006, 7.74860500e-006, 1.82403232e-005, 4.12619675e-005,
        8.97080831e-005, 1.87469379e-004, 3.76613763e-004, 7.27404867e-004,
        1.35087337e-003, 2.41242021e-003, 4.14314238e-003, 6.84354791e-003,
        1.08727800e-002, 1.66164536e-002, 2.44288204e-002, 3.45508259e-002,
        4.70141845e-002, 6.15508570e-002, 7.75339035e-002, 9.39759278e-002,
        1.09602780e-001, 1.23003231e-001, 1.32833918e-001, 1.38039686e-001,
        1.38039686e-001, 1.32833918e-001, 1.23003231e-001, 1.09602780e-001,
        9.39759278e-002, 7.75339035e-002, 6.15508570e-002, 4.70141845e-002,
        3.45508259e-002, 2.44288204e-002, 1.66164536e-002, 1.08727800e-002,
        6.84354791e-003, 4.14314238e-003, 2.41242021e-003, 1.35087337e-003,
        7.27404867e-004, 3.76613763e-004, 1.87469379e-004, 8.97080831e-005,
        4.12619675e-005, 1.82403232e-005, 7.74860500e-006, 3.16274404e-006,
        1.24020127e-006, 4.67135464e-007, 1.68984864e-007, 5.86996592e-008,
        1.95763332e-008, 6.26695990e-009, 1.92544279e-009, 5.67632503e-010,
        1.60538055e-010, 4.35482086e-011, 1.13278581e-011, 2.82494669e-012,
        6.75232587e-013, 1.54656731e-013, 3.39346936e-014, 7.13118552e-015,
        1.43483108e-015, 2.76334414e-016, 5.09252876e-017, 8.97760665e-018,
        1.51347552e-018, 2.43911295e-019, 3.75645888e-020, 5.52660603e-021,
        7.76441334e-022, 1.04126240e-022, 1.33241044e-023, 1.62615003e-024,
        1.89208081e-025, 2.09787696e-026, 2.21553770e-027, 2.22754804e-028,
        2.13111054e-029, 1.93905368e-030, 1.67704265e-031, 1.37792437e-032,
        1.07493186e-033, 7.95698157e-035, 5.58540987e-036, 3.71550466e-037,
        2.34068128e-038, 1.39547613e-039, 7.86755683e-041, 4.19144239e-042,
        2.10837804e-043, 1.00054308e-044, 4.47560089e-046, 1.88540741e-047,
        7.47292582e-049, 2.78409039e-050, 9.73957593e-052, 3.19593420e-053,
        9.82590654e-055, 2.82720987e-056, 7.60368146e-058, 1.90903879e-059,
        4.46835956e-061, 9.73672145e-063, 1.97227114e-064, 3.70795751e-066,
        6.45961747e-068, 1.04096107e-069, 1.54891893e-071, 2.12400859e-073,
        2.67877709e-075, 3.10054148e-077, 3.28602898e-079, 3.18119127e-081,
        2.80594068e-083, 2.24880262e-085, 1.63283947e-087, 1.07078869e-089,
        6.32100452e-092, 3.34687619e-094, 1.58342577e-096, 6.66599405e-099,
        2.48600835e-101, 8.17356796e-104, 2.35674821e-106, 5.92550121e-109,
        1.29102717e-111, 2.42086269e-114, 3.87753443e-117, 5.26105468e-120,
        5.99104037e-123, 5.66705337e-126, 4.40150917e-129, 2.77042574e-132,
        1.39226520e-135, 5.49176431e-139, 1.66702081e-142, 3.80534786e-146,
        6.35683325e-150, 7.52171850e-154, 6.05900969e-158, 3.16346232e-162,
        1.00595180e-166, 1.79659626e-171, 1.61549550e-176, 6.26728995e-182,
        8.31521612e-188, 2.57171258e-194, 8.89916777e-202, 5.23585453e-211
    }
};

/**
 * Compute the derivative of the function points given
 *
 * @param fx Function points
 * @param h Step
 * @return vector of size fx.n_elem - 1 containing the derivative of fx term by term and
 */
arma::vec
SchrodingerVerificator::derivative(const arma::vec &fx, double h)
{
    return arma::diff(fx) / h;
}

/**
 * Compute the eigenvalues of the quantum oscillator for a given n
 *
 * @param phi Phi class containing wave functions
 * @param n \f$n\f$ for \f$\psi_n(z)\f$
 * @return E_n = (n + 1/2)
 */
arma::vec
SchrodingerVerificator::getEn(Phi phi, int n)
{
    double step = (phi.getMax() - phi.getMin()) / phi.getNVals();
    arma::vec Z = phi.getZ();
    arma::vec phi_n = phi.getResults().row(n).t();
    //dphiz2 has n - 2 columns (we lost 1 column by derivative)
    arma::vec dphiz2 = derivative(derivative(phi_n, step), step);
    //So we have to truncate z and phi_n at the middle (1st value and last value)
    arma::vec zTrunc = Z.subvec(1, arma::size(dphiz2));
    phi_n = phi_n.subvec(1, arma::size(dphiz2));
    return - ( dphiz2 / (2.0 * phi_n)) + ((1.0 / 2.0) * arma::square(zTrunc));
}

/**
 * Returns the matrix where \f$M_(i,j) = \int{\psi_i(z)\psi_j(z)dz}\f$
 * @todo further optimization : use vectorization, use dynamic programming (for factorial calculations)
 * @param n number of weights when computing the gaussian quadrature
 * @return the matrix where \f$M_(i,j) = \int{\psi_i(z)\psi_j(z)dz}\f$
 */
arma::mat
SchrodingerVerificator::computeIntegralOrthonormality(int n)
{
    arma::mat polynoms = Polgen::getPolFromZVec(hermiteMatrix.row(0).t(), n);
    arma::mat results(n, n);
    double tmpFirstTerm;
    for (int i = 0 ; i < n ; i = i + 1) {
        for (int j = 0; j < n; j = j + 1) {
            tmpFirstTerm = 1.0 / std::sqrt(std::pow(2.0, i + j) * Phi::factorial(i) * Phi::factorial(j));
            results(i, j) = tmpFirstTerm * arma::sum(hermiteMatrix.row(1) % polynoms.row(
                                i) % polynoms.row(j)) / std::sqrt(PI);
            //Hides values < 0.0001 (near to 0.0)
            results(i, j) = results(i, j) < 1.0e-4 ? 0.0 : results(i, j);
        }
    }
    return results;
}

/**
 * orthogonality : pretty prints the orthonormality matrix
 * @param n : precision during the gauss-hermite integral computation
 */
void SchrodingerVerificator::orthogonality(int n)
{
    SchrodingerVerificator::computeIntegralOrthonormality(n).print("Ortogonality");
}
